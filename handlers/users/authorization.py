import asyncio
import logging
import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup
from asyncpg import UniqueViolationError

from keyboards.default import get_main_menu_keyboard
from keyboards.default.menu_keyboards import classes
from loader import dp, _, bot
from states.states import Authorization as Auth, Quiz
from utils.db_api.db_commands import DBCommands
from datetime import date

db = DBCommands()


def match_nick(text, alphabet=set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')):
    return not alphabet.isdisjoint(text.lower())


def match_age(age):
    if len(age) == 10:
        re.search("\d\d.\d\d.\d{4}", age)
        return True
    else:
        return False


def calculate_age(birthdate):
    birth = birthdate.split(".")
    birthdate = date(int(birth[-1]), int(birth[1]), int(birth[0]))
    today = date.today()
    age = today.year - birthdate.year - ((today.month, today.day) < (birthdate.month, birthdate.day))
    if age < 12:
        return 0
    if age > 18:
        return 1
    return age


def is_cyrrylic(symb):
    return True if u'\u0400' <= symb <=u'\u04FF' or u'\u0500' <= symb <= u'\u052F' else False


@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    lang = call.data[-2:]
    await db.set_language(lang)
    if lang == 'ru':
        await call.message.edit_text("""üëã–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! 
–Ø –ë–æ—Ç-SRB –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ –≤ —à–∫–æ–ª–µ, –∞ –µ—Å–ª–∏ —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π, –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–πü§ù
    
–Ø –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: 
1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—èüì≤
2. –£–∫–∞–∑—ã–≤–∞–µ—à—å —à–∫–æ–ª—É –∏ –∫–ª–∞—Å—Åüìñ
3. –ü—Ä–æ—Ö–æ–¥–∏—à—å –æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–µ—à—å –æ–≥–æ–Ω—å–∫–∏üî•
üòå–ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π!

üôå–î–∞–ª—å—à–µ –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.
–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!üòâ""")
    else:
        await call.message.edit_text("""üëã–°–∞–ª–æ–º –¥—û—Å—Ç–∏–º!
–ú–µ–Ω SRB –±–æ—Ç–∏–º–∞–Ω –≤–∞ —Å–∏–∑–≥–∞ –º–∞–∫—Ç–∞–±–¥–∞ –º–∞—à“≥—É—Ä –±—û–ª–∏—à–∏–Ω–≥–∏–∑–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞–º–∞–Ω, –∞–≥–∞—Ä
—Å–∏–∑ –º–∞–∫—Ç–∞–±–¥–∞ —è–Ω–≥–∏ –±—û–ª—Å–∞–Ω–≥–∏–∑, —è–Ω–≥–∏ –¥—û—Å—Ç–ª–∞—Ä —Ç–æ–ø–∏–Ω–≥ü§ù

–ú–µ–Ω–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à –∂—É–¥–∞ –æ—Å–æ–Ω
1. –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥üì≤
2. –ú–∞–∫—Ç–∞–± –≤–∞ —Å–∏–Ω—Ñ–Ω–∏ –±–µ–ª–≥–∏–ª–∞–Ω–≥üìñ
3. –°—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥ –≤–∞ —É—á“õ—É–Ω–ª–∞—Ä–Ω–∏ –æ–ª–∏–Ω–≥üî•
üòå “ö–∏–π–∏–Ω—á–∏–ª–∏–∫ –π—û“õ!

üôå–ö–µ–π–∏–Ω—á–∞–ª–∏–∫ “≥–∞–º–º–∞—Å–∏ –±–∞—Ç–∞—Ñ—Å–∏–ª –±–∞—ë–Ω “õ–∏–ª–∏–Ω–∞–¥–∏.
–í–∞“õ—Ç–∏–Ω–≥–∏–∑ —è—Ö—à–∏ —û—Ç—Å–∏–Ω!üòâ""")
    await call.message.answer(_("‚úíÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ: (–Ω–∞–ø—Ä–∏–º–µ—Ä:–ê–∑–∏–∑–æ–≤ –ê–∑–∏–∑)", locale=lang))
    await call.answer(cache_time=1)
    await Auth.full_name.set()


@dp.message_handler(state=Auth.full_name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text
    if name.isdigit():
        await message.answer(text=_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –±–µ–∑ —á–∏—Å–µ–ª"))

    elif is_cyrrylic(name) == False:
        await message.answer(text=_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ"))

    else:
        await db.set_full_name(name)
        await state.update_data(name=name)
        await message.answer(text=_("‚úíÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: (–Ω–∞–ø—Ä–∏–º–µ—Ä: trippieredd34)"))
        await Auth.nickname.set()


@dp.message_handler(state=Auth.nickname)
async def get_surname(message: types.Message, state: FSMContext):
    nickname = message.text
    try:
        await db.set_nickname(nickname)
        await state.update_data(nickname=nickname)
        await message.answer(text=_("üóí–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):"))
        await Auth.age.set()
    except UniqueViolationError:
        await message.answer(text=_("–£–ø—Å! –î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"))




@dp.message_handler(state=Auth.age)
async def get_age(message: types.Message, state: FSMContext):
    age = message.text
    try:
        if match_age(age) != True:
            await message.answer(text=_("–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–¥.–º–º.–≥–≥–≥–≥)"))
        elif calculate_age(age) > 2:
            await db.set_age(age)
            await state.update_data(age=age)
            kb = [
                [
                    types.KeyboardButton(text=_("–ú–∞–ª—å—á–∏–∫")),
                    types.KeyboardButton(text=_("–î–µ–≤–æ—á–∫–∞"))
                ],
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
            )
            await message.answer(text=_("üë®üèªüë©üèª–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:"), reply_markup=keyboard)
            await Auth.gender.set()
        elif calculate_age(age) == 0:
            await message.answer(text=_("–í–∞–º –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö 12, –±—É–¥–µ–º –∂–¥–∞—Ç—å –ø–æ–∑–∂–µ"))
        else:
            await message.answer(text=_("–£–ø—Å! –í–∏–¥–∏–º–æ –≤—ã –¥–∞–≤–Ω–æ –æ–∫–æ–Ω—á–∏–ª–∏ —à–∫–æ–ª—É, –∏ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ –¥–ª—è –≤–∞—Å"))
    except ValueError:
        await message.answer(text=_("–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–¥.–º–º.–≥–≥–≥–≥)"))


@dp.message_handler(state=Auth.gender)
async def get_gender(message: types.Message, state: FSMContext):
    gender = message.text
    user = await db.get_user(message.from_user.id)
    await db.set_gender(gender)
    if gender == "–ú–∞–ª—å—á–∏–∫" or gender == "–î–µ–≤–æ—á–∫–∞" or gender == "“ö–∏–∑" or gender == "–ô–∏–≥–∏—Ç":
        await state.update_data(gender=gender)
        reg = [reg.name for reg in await db.get_regions(user.language)]
        kb = [[types.KeyboardButton(text=reg[i])] for i in range(len(reg)) if i != 14]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
        )
        await message.answer(text=_("üó∫–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å:"), reply_markup=keyboard)
        await Auth.region.set()
    else:
        await message.answer(text=_("üìå–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–ºüëá"))


@dp.message_handler(state=Auth.region)
async def get_region(message: types.Message, state: FSMContext):
    region = message.text
    await db.set_region(region)
    await state.update_data(region=region)
    dist = [dist.name for dist in await db.get_district(region)]
    kb = [[types.KeyboardButton(text=dist[i])] for i in range(len(dist))]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    await message.answer(text=_("üåÜ–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–∞–π–æ–Ω:"), reply_markup=keyboard)
    await Auth.district.set()


@dp.message_handler(state=Auth.district)
async def get_district(message: types.Message, state: FSMContext):
    district = message.text
    await db.set_district(district)
    await state.update_data(district=district)
    school = [school.number for school in await db.get_school(district)]
    kb = [[types.KeyboardButton(text=school[i])] for i in range(len(school))]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    await message.answer(text=_("üè¢–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã:"), reply_markup=keyboard)
    await Auth.school.set()


@dp.message_handler(state=Auth.school)
async def get_school(message: types.Message, state: FSMContext):
    school = message.text
    await db.set_school(school)
    await state.update_data(school=school)
    clas = [clas.number for clas in await db.get_classroom(school)]
    kb = [[types.KeyboardButton(text=clas[i])] for i in range(len(clas))]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    await message.answer(text=_("üèõ–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å:"), reply_markup=keyboard)
    await Auth.classroom.set()


@dp.message_handler(state=Auth.classroom)
async def get_classroom(message: types.Message, state: FSMContext):
    classroom = message.text
    await state.update_data(classroom=classroom)
    await db.set_classroom(classroom)
    await message.answer(_('üñº–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ:'),reply_markup=ReplyKeyboardRemove())
    await Auth.photo.set()


@dp.message_handler(state=Auth.photo, content_types=types.ContentType.PHOTO)
async def get_photo(message: types.Message, state: FSMContext):
    try:
        photo = message.photo[-1].file_id
        await state.update_data(photo=photo)
        await db.set_photo(photo)
        user = await db.get_user(message.from_user.id)
        repl = ReplyKeyboardMarkup(resize_keyboard=True)
        repl.add(types.KeyboardButton(_('–î–∞')), types.KeyboardButton(_('–ù–µ—Ç')))
        await message.answer(_('üòâ–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å?'),reply_markup=repl)
        await Auth.finish.set()
    except:
        await message.answer(_('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞'))
        await Auth.photo.set()


@dp.message_handler(state=Auth.finish)
async def finish(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if message.text == '–î–∞':
        classroom = await state.get_data()
        if await db.get_classmates(classroom['classroom']) == False:
            if user.language == 'ru':
                await message.answer(f'–£–ø—Å! –í –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –µ—â–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µüîó: {user.referral}', reply_markup=get_main_menu_keyboard(lang=user.language))
            if user.language == 'uz':
                await message.answer(f'–í–æ–π! –ë—É —Å–∏–Ω—Ñ–¥–∞ “≥–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω —Ç–∞–ª–∞–±–∞ –π—û“õ, —É–ª–∞—Ä–Ω–∏ —É—à–±—É “≥–∞–≤–æ–ª–∞ –æ—Ä“õ–∞–ª–∏ —Ç–∞–∫–ª–∏—Ñ “õ–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ωüîó: {user.referral}', reply_markup=get_main_menu_keyboard(lang=user.language))
            await state.finish()
        else:
            user = await db.get_user(message.from_user.id)
            await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å"), reply_markup=classes(user.language))
            await Quiz.start.set()
    else:
        await message.answer(_('üóÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'), reply_markup=get_main_menu_keyboard(lang=user.language))
        await state.finish()










